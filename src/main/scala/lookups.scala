
// SÃ¼leyman Savas, 2016-12-16
// Halmstad University


package fputil

import chisel3._
import chisel3.util._

class lookupL() extends Module {
  val io = IO(new Bundle {

    val addr = Input(UInt(6.W))
    val out = Output(UInt(27.W))
  })
  // Create a sequence of tuples (address, value)
  val lookupTable = Seq(
    (0.U -> "b000000000000000000000000000".U(27.W)),
    (1.U -> "b111111000000111111000000111".U(27.W)),
    (2.U -> "b111110000011111000001111100".U(27.W)),
    (3.U -> "b111101001000100110001101010".U(27.W)),
    (4.U -> "b111100001111000011110000111".U(27.W)),
    (5.U -> "b111011010111001100000011101".U(27.W)),
    (6.U -> "b111010100000111010100000111".U(27.W)),
    (7.U -> "b111001101100001010110100010".U(27.W)),
    (8.U -> "b111000111000111000111000111".U(27.W)),
    (9.U -> "b111000000111000000111000000".U(27.W)),
    (10.U -> "b110111010110011111001000101".U(27.W)),
    (11.U -> "b110110100111010000001101101".U(27.W)),
    (12.U -> "b110101111001010000110101111".U(27.W)),
    (13.U -> "b110101001100011101111011000".U(27.W)),
    (14.U -> "b110100100000110100100000110".U(27.W)),
    (15.U -> "b110011110110010001110100101".U(27.W)),
    (16.U -> "b110011001100110011001100110".U(27.W)),
    (17.U -> "b110010100100010110000111111".U(27.W)),
    (18.U -> "b110001111100111000001100011".U(27.W)),
    (19.U -> "b110001010110010111001000011".U(27.W)),
    (20.U -> "b110000110000110000110000110".U(27.W)),
    (21.U -> "b110000001100000011000000110".U(27.W)),
    (22.U -> "b101111101000001011111010000".U(27.W)),
    (23.U -> "b101111000101001001100100000".U(27.W)),
    (24.U -> "b101110100010111010001011101".U(27.W)),
    (25.U -> "b101110000001011100000010111".U(27.W)),
    (26.U -> "b101101100000101101100000101".U(27.W)),
    (27.U -> "b101101000000101101000000101".U(27.W)),
    (28.U -> "b101100100001011001000010110".U(27.W)),
    (29.U -> "b101100000010110000001011000".U(27.W)),
    (30.U -> "b101011100100110001000001010".U(27.W)),
    (31.U -> "b101011000111011010010001100".U(27.W)),
    (32.U -> "b101010101010101010101010101".U(27.W)),
    (33.U -> "b101010001110100000111111010".U(27.W)),
    (34.U -> "b101001110010111100000101001".U(27.W)),
    (35.U -> "b101001010111111010110101000".U(27.W)),
    (36.U -> "b101000111101011100001010001".U(27.W)),
    (37.U -> "b101000100011011111000011001".U(27.W)),
    (38.U -> "b101000001010000010100000101".U(27.W)),
    (39.U -> "b100111110001000101100101111".U(27.W)),
    (40.U -> "b100111011000100111011000100".U(27.W)),
    (41.U -> "b100111000000100111000000100".U(27.W)),
    (42.U -> "b100110101001000011100111110".U(27.W)),
    (43.U -> "b100110010001111100011010010".U(27.W)),
    (44.U -> "b100101111011010000100101111".U(27.W)),
    (45.U -> "b100101100100111111011010011".U(27.W)),
    (46.U -> "b100101001111001000001001010".U(27.W)),
    (47.U -> "b100100111001101010000101110".U(27.W)),
    (48.U -> "b100100100100100100100100100".U(27.W)),
    (49.U -> "b100100001111110110111100000".U(27.W)),
    (50.U -> "b100011111011100000100011111".U(27.W)),
    (51.U -> "b100011100111100000110101011".U(27.W)),
    (52.U -> "b100011010011110111001011000".U(27.W)),
    (53.U -> "b100011000000100011000000100".U(27.W)),
    (54.U -> "b100010101101100011110010111".U(27.W)),
    (55.U -> "b100010011010111001000000100".U(27.W)),
    (56.U -> "b100010001000100010001000100".U(27.W)),
    (57.U -> "b100001110110011110101011010".U(27.W)),
    (58.U -> "b100001100100101110001010011".U(27.W)),
    (59.U -> "b100001010011010000001000010".U(27.W)),
    (60.U -> "b100001000010000100001000010".U(27.W)),
    (61.U -> "b100000110001001001101110100".U(27.W)),
    (62.U -> "b100000100000100000100000100".U(27.W)),
    (63.U -> "b100000010000001000000100000".U(27.W))
  )

  // Use MuxLookup to select the value based on the address
  val data = MuxLookup(io.addr, 0.U(27.W))(lookupTable)
  io.out := data
}

class lookupJ() extends Module {
  val io = IO(new Bundle {

    val addr = Input(UInt(6.W))
    val out = Output(UInt(23.W))
  })

  // Create a sequence of tuples (index, value)
  val lookupTable = Seq(
    (0.U -> "b00000011111111111110000".U(23.W)),
    (1.U -> "b00000011111000001001111".U(23.W)),
    (2.U -> "b00000011110000101100010".U(23.W)),
    (3.U -> "b00000011101001100011111".U(23.W)),
    (4.U -> "b00000011100010101111101".U(23.W)),
    (5.U -> "b00000011011100001110000".U(23.W)),
    (6.U -> "b00000011010101111110010".U(23.W)),
    (7.U -> "b00000011001111111111010".U(23.W)),
    (8.U -> "b00000011001010010000001".U(23.W)),
    (9.U -> "b00000011000100101111111".U(23.W)),
    (10.U -> "b00000010111111011101111".U(23.W)),
    (11.U -> "b00000010111010011001011".U(23.W)),
    (12.U -> "b00000010110101100001100".U(23.W)),
    (13.U -> "b00000010110000110101110".U(23.W)),
    (14.U -> "b00000010101100010101011".U(23.W)),
    (15.U -> "b00000010101000000000000".U(23.W)),
    (16.U -> "b00000010100011110100111".U(23.W)),
    (17.U -> "b00000010011111110011101".U(23.W)),
    (18.U -> "b00000010011011111011110".U(23.W)),
    (19.U -> "b00000010011000001100110".U(23.W)),
    (20.U -> "b00000010010100100110001".U(23.W)),
    (21.U -> "b00000010010001000111110".U(23.W)),
    (22.U -> "b00000010001101110001000".U(23.W)),
    (23.U -> "b00000010001010100001101".U(23.W)),
    (24.U -> "b00000010000111011001010".U(23.W)),
    (25.U -> "b00000010000100010111101".U(23.W)),
    (26.U -> "b00000010000001011100100".U(23.W)),
    (27.U -> "b00000001111110100111011".U(23.W)),
    (28.U -> "b00000001111011111000010".U(23.W)),
    (29.U -> "b00000001111001001110101".U(23.W)),
    (30.U -> "b00000001110110101010100".U(23.W)),
    (31.U -> "b00000001110100001011011".U(23.W)),
    (32.U -> "b00000001110001110001011".U(23.W)),
    (33.U -> "b00000001101111011100000".U(23.W)),
    (34.U -> "b00000001101101001011001".U(23.W)),
    (35.U -> "b00000001101010111110110".U(23.W)),
    (36.U -> "b00000001101000110110100".U(23.W)),
    (37.U -> "b00000001100110110010010".U(23.W)),
    (38.U -> "b00000001100100110001111".U(23.W)),
    (39.U -> "b00000001100010110101010".U(23.W)),
    (40.U -> "b00000001100000111100010".U(23.W)),
    (41.U -> "b00000001011111000110101".U(23.W)),
    (42.U -> "b00000001011101010100011".U(23.W)),
    (43.U -> "b00000001011011100101010".U(23.W)),
    (44.U -> "b00000001011001111001010".U(23.W)),
    (45.U -> "b00000001011000010000001".U(23.W)),
    (46.U -> "b00000001010110101001111".U(23.W)),
    (47.U -> "b00000001010101000110011".U(23.W)),
    (48.U -> "b00000001010011100101101".U(23.W)),
    (49.U -> "b00000001010010000111011".U(23.W)),
    (50.U -> "b00000001010000101011100".U(23.W)),
    (51.U -> "b00000001001111010010001".U(23.W)),
    (52.U -> "b00000001001101111011000".U(23.W)),
    (53.U -> "b00000001001100100110001".U(23.W)),
    (54.U -> "b00000001001011010011011".U(23.W)),
    (55.U -> "b00000001001010000010110".U(23.W)),
    (56.U -> "b00000001001000110100001".U(23.W)),
    (57.U -> "b00000001000111100111011".U(23.W)),
    (58.U -> "b00000001000110011100101".U(23.W)),
    (59.U -> "b00000001000101010011101".U(23.W)),
    (60.U -> "b00000001000100001100011".U(23.W)),
    (61.U -> "b00000001000011000110110".U(23.W)),
    (62.U -> "b00000001000010000010111".U(23.W)),
    (63.U -> "b00000001000001000000101".U(23.W))
  )

  // Use MuxLookup to select the value based on the address
  val data = MuxLookup(io.addr, 0.U(23.W))(lookupTable)
  io.out := data
}

class lookupC() extends Module {
  val io = IO(new Bundle {

    val addr = Input(UInt(width = 6.W))
    val out = Output(UInt(width = 24.W))
  })

  val lookupTable = Seq(
    (0.U -> "b000000000000111110100001".U(24.W)),
    (1.U -> "b000000000000111011101101".U(24.W)),
    (2.U -> "b000000000000111001000011".U(24.W)),
    (3.U -> "b000000000000110110100011".U(24.W)),
    (4.U -> "b000000000000110100001100".U(24.W)),
    (5.U -> "b000000000000110001111110".U(24.W)),
    (6.U -> "b000000000000101111111000".U(24.W)),
    (7.U -> "b000000000000101101111001".U(24.W)),
    (8.U -> "b000000000000101100000001".U(24.W)),
    (9.U -> "b000000000000101010010000".U(24.W)),
    (10.U -> "b000000000000101000100100".U(24.W)),
    (11.U -> "b000000000000100110111111".U(24.W)),
    (12.U -> "b000000000000100101011110".U(24.W)),
    (13.U -> "b000000000000100100000010".U(24.W)),
    (14.U -> "b000000000000100010101011".U(24.W)),
    (15.U -> "b000000000000100001011001".U(24.W)),
    (16.U -> "b000000000000100000001010".U(24.W)),
    (17.U -> "b000000000000011110111111".U(24.W)),
    (18.U -> "b000000000000011101111000".U(24.W)),
    (19.U -> "b000000000000011100110100".U(24.W)),
    (20.U -> "b000000000000011011110011".U(24.W)),
    (21.U -> "b000000000000011010110101".U(24.W)),
    (22.U -> "b000000000000011001111011".U(24.W)),
    (23.U -> "b000000000000011001000010".U(24.W)),
    (24.U -> "b000000000000011000001101".U(24.W)),
    (25.U -> "b000000000000010111011001".U(24.W)),
    (26.U -> "b000000000000010110101000".U(24.W)),
    (27.U -> "b000000000000010101111001".U(24.W)),
    (28.U -> "b000000000000010101001100".U(24.W)),
    (29.U -> "b000000000000010100100001".U(24.W)),
    (30.U -> "b000000000000010011111000".U(24.W)),
    (31.U -> "b000000000000010011010000".U(24.W)),
    (32.U -> "b000000000000010010101010".U(24.W)),
    (33.U -> "b000000000000010010000110".U(24.W)),
    (34.U -> "b000000000000010001100011".U(24.W)),
    (35.U -> "b000000000000010001000010".U(24.W)),
    (36.U -> "b000000000000010000100001".U(24.W)),
    (37.U -> "b000000000000010000000010".U(24.W)),
    (38.U -> "b000000000000001111100101".U(24.W)),
    (39.U -> "b000000000000001111001000".U(24.W)),
    (40.U -> "b000000000000001110101100".U(24.W)),
    (41.U -> "b000000000000001110010010".U(24.W)),
    (42.U -> "b000000000000001101111000".U(24.W)),
    (43.U -> "b000000000000001101100000".U(24.W)),
    (44.U -> "b000000000000001101001000".U(24.W)),
    (45.U -> "b000000000000001100110001".U(24.W)),
    (46.U -> "b000000000000001100011011".U(24.W)),
    (47.U -> "b000000000000001100000110".U(24.W)),
    (48.U -> "b000000000000001011110010".U(24.W)),
    (49.U -> "b000000000000001011011110".U(24.W)),
    (50.U -> "b000000000000001011001011".U(24.W)),
    (51.U -> "b000000000000001010111000".U(24.W)),
    (52.U -> "b000000000000001010100111".U(24.W)),
    (53.U -> "b000000000000001010010101".U(24.W)),
    (54.U -> "b000000000000001010000101".U(24.W)),
    (55.U -> "b000000000000001001110101".U(24.W)),
    (56.U -> "b000000000000001001100101".U(24.W)),
    (57.U -> "b000000000000001001010110".U(24.W)),
    (58.U -> "b000000000000001001001000".U(24.W)),
    (59.U -> "b000000000000001000111010".U(24.W)),
    (60.U -> "b000000000000001000101100".U(24.W)),
    (61.U -> "b000000000000001000011111".U(24.W)),
    (62.U -> "b000000000000001000010010".U(24.W)),
    (63.U -> "b000000000000001000000110".U(24.W))
  )

  // Use MuxLookup to select the value based on the address
  val data = MuxLookup(io.addr, 0.U(24.W))(lookupTable)
  io.out := data
}
